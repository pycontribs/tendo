[build-system]
requires = [
  "setuptools >= 65.4.0", # required by pyproject+setuptools_scm integration
  "setuptools_scm[toml] >= 7.0.5", # required for "no-local-version" scheme
]
build-backend = "setuptools.build_meta"

[project]
# https://peps.python.org/pep-0621/#readme
requires-python = ">=3.10"
dynamic = ["version", "dependencies", "optional-dependencies"]
name = "tendo"
description = "A Python library that extends some core functionality"
readme = "README.md"
authors = [{ "name" = "Sorin Sbarnea", "email" = "ssbarnea@redhat.com" }]
maintainers = [{ "name" = "Sorin Sbarnea", "email" = "ssbarnea@redhat.com" }]
license = { text = "MIT" }
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: Python Software Foundation License",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Bug Tracking",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Topic :: System :: Systems Administration",
  "Topic :: Utilities",
]
keywords = [
    "tendo",
    "tee",
    "unicode",
    "singleton",
    ]

[project.urls]
homepage = "https://github.com/pycontribs/tendo"
documentation = "https://tendo.readthedocs.io"
repository = "https://github.com/pycontribs/tendo"
changelog = "https://github.com/pycontribs/tendo/releases"

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
fail_under = 100
skip_covered = true
show_missing = true

[tool.coverage.run]
source = ["src"]
# Do not use branch until bug is fixes:
# https://github.com/nedbat/coveragepy/issues/605
branch = false
parallel = true
concurrency = ["multiprocessing", "thread"]

[tool.isort]
profile = "black"
add_imports = "from __future__ import annotations"

[tool.ruff]
target-version = "py310"
lint.select = ["ALL"]
lint.ignore = [
  # Disabled on purpose:
  "ANN101", # Missing type annotation for `self` in method
  "D203", # incompatible with D211
  "D211",
  "D213", # incompatible with D212
  "E501", # we use black
  "RET504", # Unnecessary variable assignment before `return` statement
  "COM812", # conflicts with ISC001 on format
  "ISC001", # conflicts with COM812 on format
  # Temporary disabled during adoption:
  "A001",
  "A002",
  "ANN",
  "ARG",
  "B",
  "BLE001",
  "C",
  "C901",
  "D",
  "EM101",
  "ERA",
  "EXE",
  "FBT",
  "FURB",
  "G",
  "N",
  "PGH",
  "PLR",
  "PLW",
  "PT",
  "PTH",
  "RUF012",
  "S",
  "S101",
  "SIM",
  "SIM115",
  "SLF",
  "T",
  "TRY",
  "UP",
  "UP031",
]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"
[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.setuptools.dynamic]
dependencies = { file = [".config/requirements.in"] }
optional-dependencies.docs = { file = [".config/requirements-docs.in"] }
optional-dependencies.test = { file = [".config/requirements-test.in"] }

[tool.setuptools_scm]
local_scheme = "no-local-version"
tag_regex = "^(?P<prefix>v)?(?P<version>\\d+[^\\+]*)(?P<suffix>.*)?$"
write_to = "src/tendo/_version.py"
# To prevent accidental pick of mobile version tags such 'v6'
git_describe_command = [
  "git",
  "describe",
  "--dirty",
  "--tags",
  "--long",
  "--match",
  "v*.*",
]
